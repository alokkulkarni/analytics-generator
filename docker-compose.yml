version: '3.8'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: [ "CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181" ]
      interval: 10s
      timeout: 5s
      retries: 5

  broker:
    image: confluentinc/cp-kafka:latest
    hostname: broker
    container_name: broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
#      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#      KAFKA_JMX_PORT: 9101
#      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      test: [ "CMD", "bash", "-c", 'nc -z localhost 9092' ]
      interval: 10s
      timeout: 5s
      retries: 5

#  kafkaConnectUI:
#    image: landoop/fast-data-dev:latest
#    ports:
#      - "3030:3030" # Web UI
#      - "8081:8081" # Schema registry
#      - "8082:8082" # Kafka REST proxy
#      - "8083:8083" # Kafka connect distributed
#      - "9092:9092" # Kafka broker
#      - "2181:2181" # ZooKeeper
#    environment:
#      ADV_HOST: 127.0.0.1
#      RUNTESTS: 0
#      DEBUG: 1
#      SAMPLEDATA: 0

  #  postgres:
#    image: postgres:latest
#    container_name: postgres
#    ports:
#      - "5432:5432"
#    environment:
#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: postgres
#      POSTGRES_DB: postgres
#    healthcheck:
#      test: [ "CMD", "pg_isready", "-U", "postgres" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5

  mysql:
    image: mysql:latest
    container_name: mysql-debezium
    ports:
      - "3306:3306"
    restart: always
    environment:
      MYSQL_DATABASE: transactions_db
      MYSQL_USER: myuser
      MYSQL_PASSWORD: secret
      MYSQL_ROOT_PASSWORD: verysecret
    command: --character-set-server=utf8 --collation-server=utf8_general_ci
    volumes:
      - ./mysql-analytics-data/data:/var/lib/mysql
    networks:
      - mysql-analytics-network

  redis:
    container_name: redis-master
    image: 'bitnami/redis:latest'
    environment:
      - REDIS_AOF_ENABLED=yes
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6379:6379"
    volumes:
      - ./redis/data:/bitnami/redis/data
    networks:
      - mysql-analytics-network

  debezium:
    image: debezium/connect:latest
    container_name: debezium
    volumes:
      - ./certs_local:/kafka/config/certs
    ports:
      - 8083:8083
    depends_on:
       broker:
          condition: service_healthy
    environment:
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium-config
      OFFSET_STORAGE_TOPIC: debezium-offset
      STATUS_STORAGE_TOPIC: debezium-status
      BOOTSTRAP_SERVERS: broker:29092
      LINK_NAME: mysql, es01

  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs/local
      - ./certs_local:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/local/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/local/ca.zip;
          unzip config/certs/local/ca.zip -d config/certs/local;
        fi;
        if [ ! -f config/certs/local/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/local/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/local/certs.zip --in config/certs/local/instances.yml --ca-cert config/certs/local/ca/ca.crt --ca-key config/certs/local/ca/ca.key;
          unzip config/certs/local/certs.zip -d config/certs/local;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs/local;
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert /usr/share/elasticsearch/config/certs/cacert.pem https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert /usr/share/elasticsearch/config/certs/cacert.pem -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: [ "CMD-SHELL", "[ -f config/certs/es01/es01.crt ]" ]
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - ./certs_local:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01.key
      - xpack.security.http.ssl.certificate=certs/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/cacert.pem
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/cacert.pem
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/cacert.pem https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - ./certs_local:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/cacert.pem
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - ENTERPRISESEARCH_HOST=http://enterprisesearch:3002
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  enterpriseSearch:
    image: docker.elastic.co/enterprise-search/enterprise-search:${STACK_VERSION}
    labels:
      co.elastic.logs/module: enterprise-search
    environment:
      - SERVERNAME=enterprisesearch
      - secret_management.encryption_keys=[${ENCRYPTION_KEY}]
      - allow_es_settings_modification=true
      - elasticsearch.host=https://es01:9200
      - elasticsearch.username=elastic
      - elasticsearch.password=${ELASTIC_PASSWORD}
      - elasticsearch.ssl.enabled=true
      - elasticsearch.ssl.certificate_authority=/usr/share/enterprise-search/config/certs/cacert.pem
      - kibana.external_url=http://kibana:5601
    ports:
      - 3002:3002
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    volumes:
      - ./certs_local:/usr/share/enterprise-search/config/certs
      - ./enterprise-search/data:/usr/share/enterprise-search/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:3002 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120


#  jobmanager:
#    image: flink:latest
#    ports:
#      - "8081:8081"
#    command: jobmanager
#    environment:
#      - |
#        FLINK_PROPERTIES=
#        jobmanager.rpc.address: jobmanager
#
#  taskmanager:
#    image: flink:latest
#    depends_on:
#      - jobmanager
#    command: taskmanager
#    environment:
#      - |
#        FLINK_PROPERTIES=
#        jobmanager.rpc.address: jobmanager
#        taskmanager.numberOfTaskSlots: 4
#  sql-client:
#    image: flink:latest
#    command: bin/sql-client.sh
#    depends_on:
#      - jobmanager
#    environment:
#      - |
#        FLINK_PROPERTIES=
#        jobmanager.rpc.address: jobmanager
#        rest.address: jobmanager

networks:
  mysql-analytics-network:
    driver: bridge

volumes:
    mysql-analytics-data:
      driver: local
    redis-data:
      driver: local
    esdata01:
      driver: local
    kibanadata:
      driver: local
    certs:
      driver: local
    certs_local:
      driver: local
    enterprise-search-data:
      driver: local